@startuml
skinparam classAttributeIconSize 0
class WithdrawOperation{
+ {static} WITHDRAW_MESSAGE : String
+ {static} THANK_YOU_WITHDRAW : String
- scanner : Scanner
- account : BankAccount
+ WithdrawOperation(scanner : Scanner, account : BankAccount)
+ execute() : void
}
WithdrawOperation ..|> BankAccountOperation
class DepositOperation{
+ {static} DEPOSIT_MESSAGE : String
+ {static} THANK_YOU_DEPOSIT : String
- scanner : Scanner
- account : BankAccount
+ DepositOperation(scanner : Scanner, account : BankAccount)
+ execute() : void
}
DepositOperation ..|> BankAccountOperation
class DepositAmountNonPositiveException{
+ {static} MESSAGE : String
+ DepositAmountNonPositiveException()
}
DepositAmountNonPositiveException --|> BankAccountOperationException
class BankTeller{
+ {static} WELCOME_MESSAGE : String
+ {static} INVALID_OPTION_MESSAGE : String
+ {static} OPTIONS_LIST_MESSAGE : String
+ {static} PROMPT_MESSAGE : String
+ {static} start() : void
}
class BankAccount{
+ {static} TRANSACTIONS_TABLE_HEADER : String
- balance : double
- transactions : ArrayList<Transaction>
+ BankAccount()
+ deposit(amount : double) : void
+ withdraw(amount : double) : void
+ printStatement() : void
}
class QuitOperation{
+ {static} GOODBYE_MESSAGE : String
- scanner : Scanner
+ QuitOperation(scanner : Scanner)
+ execute() : void
}
QuitOperation ..|> BankAccountOperation
class PrintStatementOperation{
- account : BankAccount
+ PrintStatementOperation(account : BankAccount)
+ execute() : void
}
PrintStatementOperation ..|> BankAccountOperation
class Main{
+ {static} main(args : String[]) : void
}
class WithdrawAmountNonPositiveException{
+ {static} MESSAGE : String
+ WithdrawAmountNonPositiveException()
}
WithdrawAmountNonPositiveException --|> BankAccountOperationException
class BankAccountOperationException{
+ BankAccountOperationException(message : String)
}
BankAccountOperationException --|> Exception
class Transaction{
- date : Date
- amount : double
- balance : double
+ Transaction(amount : double, balance : double)
+ getDate() : String
+ getAmount() : double
+ getBalance() : double
+ toString() : String
}
class WithdrawAmountExceedDepositException{
+ {static} MESSAGE : String
+ WithdrawAmountExceedDepositException()
}
WithdrawAmountExceedDepositException --|> BankAccountOperationException
class BankAccountOperationFactory{
+ createOperation(option : char, scanner : Scanner, account : BankAccount) : BankAccountOperation
}
WithdrawOperation--"- account" BankAccount
DepositOperation--"- account" BankAccount
PrintStatementOperation--"- account" BankAccount
interface BankAccountOperation{
execute() : void
}
@enduml